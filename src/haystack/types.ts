/*
 * Automatically generated by haystack-codegen on 30/04/21, 15:06:06.
 */

import {
	HDict,
	HRef,
	HStr,
	HCoord,
	HNum,
	HNamespace,
	valueIsKind,
	Kind,
} from 'haystack-core'

/**
 * marker
 *
 * Marker labels a dict with typing information.
 * See [Kinds chapter]`docHaystack::Kinds#marker`.
 */
export interface Marker extends HDict {}

/**
 * entity
 *
 * Top-level dicts with a unique identifier.
 * See `docHaystack::Ontology#entities` chapter.
 */
export interface Entity extends Marker {
	id?: HRef
	dis?: HStr
}

/**
 * geoPlace
 *
 * Geographic place
 */
export interface GeoPlace extends Marker {
	geoAddr?: HStr
	geoCoord?: HCoord
	geoElevation?: HNum
	geoStreet?: HStr
	geoCity?: HStr
	geoCounty?: HStr
	geoPostalCode?: HStr
	geoState?: HStr
	geoCountry?: HStr
}

/**
 * site
 *
 * Site is a geographic location of the built environment.
 * Typically site maps to one building with its own unique
 * street address.  See `docHaystack::Sites` chapter.
 */
export interface Site extends Entity, GeoPlace {
	tz?: HStr
	yearBuilt?: HNum
	primaryFunction?: HStr
	area?: HNum
	weatherStationRef?: HRef
}

/**
 * Returns true if a value is a site
 *
 * An optional namespace can be passed in that will perform the check using defs
 *
 * @param value The value to test
 * @param namespace An optional namespace
 * @returns true if the value matches
 */
export function isSite(value: unknown, namespace?: HNamespace): value is Site {
	if (!valueIsKind<HDict>(value, Kind.Dict)) {
		return false
	}
	if (namespace) {
		return !!namespace.reflect(value)?.fits('site')
	} else {
		return (
			value.has('site')
		)
	}
}

/**
 * feature
 *
 * Feature namespace of definitions formatted as 'feature:name'
 */
export interface Feature extends HDict {}

/**
 * filetype
 *
 * File format type definition
 */
export interface Filetype extends Feature {
	mime?: HStr
	fileExt?: HStr
}

/**
 * filetype
 *
 * File format type definition
 */
export namespace filetype {
	/**
	 * filetype:json
	 *
	 * Haystack JavaScript Object Notation format - see `docHaystack::Json`
	 */
	export interface Json extends Filetype {}
}


