/*
 * Copyright (c) 2021, J2 Innovations. All Rights Reserved
 */

import { CodeGenerator, TypeGuardOptions } from '../src/CodeGenerator'
import { HDict, HList, HNamespace, HSymbol } from 'haystack-core'
import { DocHeaderNode } from '../src/nodes/DocHeaderNode'
import { resolveDefaultNamespace } from '../src/namespace'

describe('CodeGenerator', function (): void {
	let namespace: HNamespace

	describe('#generate()', function (): void {
		beforeAll(function (): void {
			jest.spyOn(
				DocHeaderNode.prototype,
				'toDateString'
			).mockImplementation(() => 'date')
		})

		beforeEach(async function (): Promise<void> {
			namespace = await resolveDefaultNamespace()
		})

		it('generates a document for an ahu', function (): void {
			const code = new CodeGenerator({
				names: ['ahu'],
				namespace,
				typeGuardOptions: TypeGuardOptions.entity,
			}).generate()

			expect(code.trim()).toBe(
				`
/*
 * Automatically generated by haystack-codegen on date.
 */

/* eslint @typescript-eslint/no-namespace: "off" */

import {
	HDict,
	HStr,
	HRef,
	HMarker,
	HNamespace,
} from 'haystack-core'

/**
 * Libraries used for code generation.
 */
export const LIBS = [
	{
		name: 'lib:phIoT',
		version: '3.9.10',
	},
	{
		name: 'lib:ph',
		version: '3.9.10',
	},
]

/**
 * marker
 *
 * Marker labels a dict with typing information.
 * See [Kinds chapter]\`docHaystack::Kinds#marker\`.
 */
export type Marker = HDict

/**
 * entity
 *
 * Top-level dicts with a unique identifier.
 * See \`docHaystack::Ontology#entities\` chapter.
 */
export interface Entity extends Marker {
	/**
	 * Display name for an entity.
	 * See \`docHaystack::Ontology#entities\` chapter.
	 */
	dis?: HStr

	/**
	 * Defines the unique identifier of an entity in system using a \`ref\` value
	 * type. The scope of an entity is undefined, but must be unique with a
	 * given system or project. This identifier may be used by other entities
	 * for cross-referencing.  See \`docHaystack::Ontology#entities\` chapter.
	 */
	id?: HRef
}

/**
 * equip
 *
 * Equipment asset.
 * See \`docHaystack::Equips\` chapter.
 */
export interface Equip extends Entity {
	/**
	 * Equipment asset.
	 * See \`docHaystack::Equips\` chapter.
	 */
	equip: HMarker

	/**
	 * Reference to equip which contains this entity
	 */
	equipRef?: HRef

	/**
	 * Reference to site which contains the entity
	 */
	siteRef?: HRef

	/**
	 * Reference to space which contains this entity
	 */
	spaceRef?: HRef
}

/**
 * Returns true if the value is a equip.
 *
 * @param value The value to test.
 * @param namespace The namespace to validate against.
 * @returns true if the value matches.
 */
export function isEquip(value: unknown, namespace: HNamespace): value is Equip {
	return namespace.isValid('equip', value)
}

/**
 * output
 *
 * Entity outputs a substance with flows to other entities
 */
export type Output = Marker

/**
 * air-output
 *
 * Entity outputs air to other entities
 */
export type Air_Output = Output

/**
 * input
 *
 * Entity inputs a substance which flows from another entity
 */
export type Input = Marker

/**
 * elec-input
 *
 * Entity inputs electricity which flows from another entity
 */
export interface Elec_Input extends Input {
	/**
	 * Electricity flows from the referent to this entity
	 */
	elecRef?: HRef
}

/**
 * airHandlingEquip
 *
 * HVAC equipment that conditions and delivers air via one or more fans.
 * Conditioning of air includes heating, cooling, humidification,
 * dehumidification, and ventilation. See \`docHaystack::AHUs\` chapter.
 */
export type AirHandlingEquip = Equip & Air_Output & Elec_Input

/**
 * Returns true if the value is a airHandlingEquip.
 *
 * @param value The value to test.
 * @param namespace The namespace to validate against.
 * @returns true if the value matches.
 */
export function isAirHandlingEquip(value: unknown, namespace: HNamespace): value is AirHandlingEquip {
	return namespace.isValid('airHandlingEquip', value)
}

/**
 * ahu
 *
 * Air Handling Unit: An enclosure with a fan that delivers air to a space
 * via ductwork and performs one or more of the functions of cleaning,
 * heating, cooling, humidifying, dehumidifying, ventilating or circulating
 * the air.  See \`docHaystack::AHUs\` chapter.
 */
export interface Ahu extends AirHandlingEquip {
	/**
	 * Air Handling Unit: An enclosure with a fan that delivers air to a space
	 * via ductwork and performs one or more of the functions of cleaning,
	 * heating, cooling, humidifying, dehumidifying, ventilating or circulating
	 * the air.  See \`docHaystack::AHUs\` chapter.
	 */
	ahu: HMarker
}

/**
 * Returns true if the value is a ahu.
 *
 * @param value The value to test.
 * @param namespace The namespace to validate against.
 * @returns true if the value matches.
 */
export function isAhu(value: unknown, namespace: HNamespace): value is Ahu {
	return namespace.isValid('ahu', value)
}
`.trim()
			)
		})

		it('does not create a namespace called `valueIsKind`', function (): void {
			namespace.grid.add(
				new HDict({
					def: HSymbol.make('valueIsKind:foo'),
				})
			)

			expect(
				new CodeGenerator({
					names: ['valueIsKind:foo'],
					namespace,
					typeGuardOptions: TypeGuardOptions.entity,
				}).generate()
			).toContain('export namespace valueIsKind_ {')
		})

		it('does not add values to an interface node that have the name of a property on HDict', function (): void {
			namespace.grid.add(
				new HDict({
					def: HSymbol.make('getKind'),
					is: new HList(HSymbol.make('marker')),
					tagOn: new HList([HSymbol.make('site')]),
				})
			)

			expect(
				new CodeGenerator({
					names: ['site'],
					namespace,
					typeGuardOptions: TypeGuardOptions.entity,
				}).generate()
			).not.toContain('getKind')
		})

		it('generates an isGeoPlace typeguard when all typeguards are generated', function (): void {
			expect(
				new CodeGenerator({
					names: ['discharge'],
					namespace,
					typeGuardOptions: TypeGuardOptions.all,
				}).generate()
			).toContain('isDischarge')
		})

		it('generates a list with a generic type', function (): void {
			expect(
				new CodeGenerator({
					names: ['def'],
					namespace,
					typeGuardOptions: TypeGuardOptions.entity,
				}).generate()
			).toContain('HList<HSymbol>')
		})
	}) // #generate()
})
