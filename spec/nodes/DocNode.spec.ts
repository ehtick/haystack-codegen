/*
 * Copyright (c) 2021, J2 Innovations. All Rights Reserved
 */

import { DocNode } from '../../src/nodes/DocNode'
import { InterfaceValueNode } from '../../src/nodes/InterfaceValueNode'
import { InterfaceNode } from '../../src/nodes/InterfaceNode'
import { Kind } from 'haystack-core'
import { generateNode } from '../../src/nodes/util'
import { DocCommentNode } from '../../src/nodes/DocCommentNode'

describe('DocNode', function (): void {
	beforeAll(function (): void {
		jest.spyOn(DocCommentNode.prototype, 'toDateString').mockImplementation(
			() => 'date'
		)
	})

	describe('#generate()', function (): void {
		it('generates a document with one interface', function (): void {
			const doc = new DocNode()

			doc.addInterface(
				new InterfaceNode(
					'foo',
					'Foo',
					[],
					[new InterfaceValueNode('test', Kind.Str)]
				)
			)

			expect(generateNode(doc)).toEqual(
				`/*
 * Automatically generated by haystack-codegen on date.
 */

import { HDict, HStr } from 'haystack-core'

/**
 * foo
 */
export interface Foo extends HDict {
	test: HStr
}\n\n`
			)
		})

		it('generates a document with two interfaces', function (): void {
			const doc = new DocNode()

			doc.addInterface(
				new InterfaceNode(
					'boo',
					'Boo',
					[],
					[new InterfaceValueNode('test', Kind.Str)]
				)
			)

			doc.addInterface(
				new InterfaceNode(
					'foo',
					'Foo',
					['Boo'],
					[new InterfaceValueNode('test', Kind.Str)]
				)
			)

			expect(generateNode(doc)).toBe(`/*
 * Automatically generated by haystack-codegen on date.
 */

import { HDict, HStr } from 'haystack-core'

/**
 * boo
 */
export interface Boo extends HDict {
	test: HStr
}

/**
 * foo
 */
export interface Foo extends Boo {
	test: HStr
}\n\n`)
		})
	})
})
